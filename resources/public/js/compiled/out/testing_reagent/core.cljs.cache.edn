;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name testing-reagent.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :uses {atom reagent.core}, :defs {app-state {:name testing-reagent.core/app-state, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 8, :column 10, :end-line 8, :end-column 19}}, increment-counter {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 12, :column 7, :end-line 12, :end-column 24, :arglists (quote ([c]))}, :name testing-reagent.core/increment-counter, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, counter-view {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([c]))}, :name testing-reagent.core/counter-view, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, add-counter {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([text]))}, :name testing-reagent.core/add-counter, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 18, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, timer-component {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 41, :column 7, :end-line 41, :end-column 22, :arglists (quote ([]))}, :name testing-reagent.core/timer-component, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-counter {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([]))}, :name testing-reagent.core/new-counter, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, hello-world {:protocol-inline nil, :meta {:file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :line 57, :column 7, :end-line 57, :end-column 18, :arglists (quote ([]))}, :name testing-reagent.core/hello-world, :variadic false, :file "/Users/jackmoch/workspace/clojure/testing-reagent/src/cljs/testing_reagent/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:div.col-sm-10 :div.col-sm-6 :button.btn.btn-default :key :div.col-sm-2 :name :value :type :input.form-control :counters :on-click :div :div.col-sm-4 :div.row :button.btn.btn-success :div.container :id :count :div.row.container :h1 :on-change}, :order [:counters :id :name :count :div.row :div.col-sm-2 :div.col-sm-6 :div.col-sm-4 :button.btn.btn-default :on-click :div :div.row.container :div.col-sm-10 :input.form-control :type :value :on-change :button.btn.btn-success :div.container :h1 :key]}, :doc nil}